{"version":3,"sources":["App.js","hooks/useLocation.js","hooks/useSunData.js","serviceWorker.js","index.js"],"names":["App","useState","latitude","longitude","location","setLocation","useEffect","navigator","geolocation","getCurrentPosition","coords","useLocation","Date","date","setDate","formattedDate","moment","format","lat","lng","error","setError","isLoaded","setIsLoaded","results","setResult","fetch","then","res","json","result","console","log","useSunData","id","type","value","onChange","e","target","disabled","message","Object","keys","map","key","i","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","x","y","t","options","scales","xAxes","time","unit","displayFormats","hour","ticks","min","max","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"4MA4HeA,MAtHf,WAAgB,IAAD,ECJY,WAAO,IAAD,EACCC,mBAAS,CACvCC,SAAU,EACVC,UAAW,IAHkB,mBACxBC,EADwB,KACdC,EADc,KAY/B,OANAC,qBAAU,WACRC,UAAUC,YAAYC,oBAAmB,YAAe,IAAbC,EAAY,EAAZA,OACzCL,EAAYK,QAEb,IAEIN,EDPyBO,GAAxBT,EADK,EACLA,SAAUC,EADL,EACKA,UADL,EAGaF,mBAAS,IAAIW,MAH1B,mBAGLC,EAHK,KAGCC,EAHD,KAIPC,EAAgBC,IAAOH,GAAMI,OAAO,cAJ7B,EEJW,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,IAAKJ,EAAmB,EAAnBA,cAAmB,EAC7Bd,mBAAS,MADoB,mBAChDmB,EADgD,KACzCC,EADyC,OAEvBpB,oBAAS,GAFc,mBAEhDqB,EAFgD,KAEtCC,EAFsC,OAG1BtB,mBAAS,IAHiB,mBAGhDuB,EAHgD,KAGvCC,EAHuC,KA2BvD,OAtBAnB,qBAAU,WAEI,IAARY,GAAqB,IAARC,GAIjBO,MAAM,2CAAD,OAA4CR,EAA5C,gBAAuDC,EAAvD,iBAAmEJ,EAAnE,iBACFY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCC,QAAQC,IAAIF,GACZP,GAAY,GACZE,EAAUK,EAAON,YAEnB,SAACJ,GACCW,QAAQC,IAAI,cACZT,GAAY,GACZF,EAASD,QAGd,CAAEF,EAAKC,EAAKJ,IAER,CACLS,UAASF,WAAUF,SFbgBa,CAAW,CAC9Cf,IAAKhB,EACLiB,IAAKhB,EACLY,cAAeA,IAHTS,EAXK,EAWLA,QAASF,EAXJ,EAWIA,SAAUF,EAXd,EAWcA,MA0D3B,OACE,oCACE,6BACE,2BAAOc,GAAG,OAAOC,KAAK,OAAOC,MAAOrB,EAAesB,SAAU,SAACC,GAC5DxB,EAAQwB,EAAEC,OAAOH,QAChBI,UAAWlB,IAEZF,EAAS,uCAAaA,EAAMqB,SACzBnB,EAEC,4BACGoB,OAAOC,KAAKnB,GAASoB,KAAI,SAACC,EAAKC,GAAN,OACtB,wBAAID,IAAKC,GACP,8BAAOD,EAAP,MACA,8BAAOrB,EAAQqB,SANZ,4CAenB,6BACE,kBAAC,IAAD,CACIE,KA7EI,CACZC,OAAQ,CAAC,SACTC,SAAU,CACR,CACEC,MAAO,iBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,qBACjBC,YAAa,gBACbC,YAAa,EACbR,KAAM,CAaJ,CACES,EAAG,4BACHC,EAAG,GAEL,CACEC,EAAG,4BACHD,EAAG,GAEL,CACEC,EAAG,4BACHD,EAAG,OA6CHE,QAAS,CACPC,OAAQ,CACNC,MAAO,CAAC,CACJ1B,KAAM,OACN2B,KAAM,CACJC,KAAM,OACNC,eAAgB,CACdC,KAAM,UAGVC,MAAO,CACLC,IArGE,aAsGFC,IArGK,uBGAPC,QACW,cAA7BC,OAAOlE,SAASmE,UAEe,UAA7BD,OAAOlE,SAASmE,UAEhBD,OAAOlE,SAASmE,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBtE,WACrBA,UAAUuE,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAA9D,GACLW,QAAQX,MAAMA,EAAMqB,a","file":"static/js/main.8fd5fa8c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport moment from \"moment\"\nimport { useLocation } from './hooks/useLocation';\nimport { useSunData } from './hooks/useSunData';\n\nfunction App() {\n  const { latitude, longitude } = useLocation()\n\n  const [ date, setDate ] = useState(new Date())\n  const formattedDate = moment(date).format('YYYY-MM-DD')\n  const todayMidnight = '2020-07-01' // hardcoded as string since setHours was causing infinite re-renders\n  const tomorrowMidnight = '2020-07-02' // hardcoded as string since setHours was causing infinite re-renders\n  // console.log(todayMidnight)\n  // console.log(tomorrowMidnight)\n  // debugger\n\n  const { results, isLoaded, error } = useSunData({\n    lat: latitude,\n    lng: longitude,\n    formattedDate: formattedDate\n  })\n\n  const chart = {\n    labels: ['Today'],\n    datasets: [\n      {\n        label: 'Sunrise-Sunset',\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: [\n          // {\n          //   x: '2020-07-01T04:03', // night\n          //   y: 0\n          // },\n          // {\n          //   x: '2020-07-01T04:42', // astronomical twilight begin\n          //   y: 0\n          // },\n          // {\n          //   x: '2020-07-01T05:17', // nautical twilight begin\n          //   y: 1\n          // },\n          {\n            x: '2020-07-01T12:46:33+00:00', // sunrise\n            y: 2\n          },\n          {\n            t: '2020-07-01T19:57:23+00:00', // noon\n            y: 3\n          },\n          {\n            t: '2020-07-02T03:08:13+00:00', // sunset\n            y: 2\n          },\n          // {\n          //   x: '2020-07-01T21:12:45', // nautical twilight end\n          //   y: 1\n          // },\n          // {\n          //   x: '2020-07-01T21:51:38', // astronomical twilight end\n          //   y: 0\n          // },\n          // {\n          //   x: '2020-07-01T21:51:38', // night\n          //   y: 0\n          // },\n        ]\n      }\n    ]\n  }\n\n  return (\n    <>\n      <div>\n        <input id=\"date\" type=\"date\" value={formattedDate} onChange={(e) => {\n          setDate(e.target.value)\n        }} disabled={!isLoaded}/>\n        {\n          error ? (<div>Error: {error.message}</div>) : (\n            !isLoaded ? (<div>Loading...</div>) :\n            (\n              <ul>\n                {Object.keys(results).map((key, i) => (\n                    <li key={i}>\n                      <span>{key}: </span>\n                      <span>{results[key]}</span>\n                    </li>\n                  )\n                )}\n              </ul>\n            )\n          )\n        }\n      </div>\n      <div>\n        <Line\n            data={chart}\n            options={{\n              scales: {\n                xAxes: [{\n                    type: 'time',\n                    time: {\n                      unit: 'hour',\n                      displayFormats: {\n                        hour: 'HH:mm'\n                      }\n                    },\n                    ticks: {\n                      min: todayMidnight,\n                      max: tomorrowMidnight\n                    }\n                }]\n              }\n          }}\n          />\n      </div>\n    </>\n  )\n}\n\nexport default App\n\n// Make this useDate hook obsolete before next meeting DONE\n// Get bell curve chart loading on page\n// Also look at chartjs to show sun rise data\n// https://www.chartjs.org/samples/latest/scales/time/line-point-data.html","import { useEffect, useState } from \"react\"\n\nexport const useLocation = () => {\n  const [location, setLocation] = useState({\n    latitude: 0,\n    longitude: 0,\n  })\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(({coords}) => {\n      setLocation(coords)\n    })\n  }, [])\n\n  return location\n}\n","import { useEffect, useState } from \"react\"\n\nexport const useSunData = ({lat, lng, formattedDate}) => {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [results, setResult] = useState([]);  \n\n  useEffect(() => {\n\n    if (lat === 0 || lng === 0) {\n      return\n    }\n\n    fetch(`https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=${formattedDate}&formatted=0`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result)\n          setIsLoaded(true);\n          setResult(result.results);\n        },\n        (error) => {\n          console.log('no results')\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [ lat, lng, formattedDate ])\n\n  return {\n    results, isLoaded, error\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}