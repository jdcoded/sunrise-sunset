{"version":3,"sources":["App.js","hooks/useLocation.js","hooks/useSunData.js","serviceWorker.js","index.js"],"names":["App","useState","latitude","longitude","location","setLocation","useEffect","navigator","geolocation","getCurrentPosition","coords","useLocation","Date","date","setDate","formattedDate","moment","format","todayMidnight","tomorrowMidnight","add","lat","lng","error","setError","isLoaded","setIsLoaded","results","setResult","fetch","then","res","json","result","console","log","useSunData","resultsArray","Object","keys","formattedData","map","key","i","x","toDate","filter","o","sort","a","b","valueOf","y","Math","floor","length","chart","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","data","radius","background","getHours","style","id","type","value","onChange","e","target","disabled","message","options","scales","xAxes","time","unit","displayFormats","hour","ticks","min","max","gridLines","display","yAxes","suggestedMin","suggestedMax","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b7223c36.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport moment from \"moment\"\nimport { useLocation } from './hooks/useLocation';\nimport { useSunData } from './hooks/useSunData';\n\nfunction App() {\n  const { latitude, longitude } = useLocation()\n\n  const [ date, setDate ] = useState(new Date())\n  const formattedDate = moment(date).format('YYYY-MM-DD')\n  const todayMidnight = formattedDate\n  const tomorrowMidnight = moment(date).add(1,'d').format('YYYY-MM-DD')\n  // console.log(todayMidnight)\n  // console.log(tomorrowMidnight)\n  // debugger\n\n  const { results, isLoaded, error } = useSunData({\n    lat: latitude,\n    lng: longitude,\n    formattedDate: formattedDate\n  })\n\n  // console.log('results: ', results)\n\n  // let sunriseTime, solarNoon, sunsetTime\n\n  const resultsArray = Object.keys(results)\n\n  const formattedData = resultsArray.map((key, i) => {\n    // console.log('result: ', results[key])\n    if (typeof results[key] == 'string') {\n      return {\n        x: moment(results[key]).toDate(),\n        // debug: moment(results[key]).format('HH:mm'),\n        // key\n        // y: i\n      }\n    }\n    return null\n  }).filter((o) => o ).sort((a, b) => a.x.valueOf() - b.x.valueOf()).map((o, i) => {\n    return {\n      ...o,\n      i,\n      y: i < Math.floor(resultsArray.length / 2) ? i : resultsArray.length - 2 - i\n    }\n  })\n  \n  console.log('formattedData: ', formattedData)\n\n  const chart = {\n    labels: ['Today'],\n    datasets: [\n      {\n        label: 'Sunrise-Sunset',\n        fill: false,\n        lineTension: 0.1, // explore this to give line more of a bell curve\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        // data is null on first render and doesn't get updated via map\n        data: formattedData\n      },\n      {\n        label: 'currentTime',\n        fill: false,\n        lineTension: 0.1, // explore this to give line more of a bell curve\n        radius: 6,\n        backgroundColor: 'orange',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        // data is null on first render and doesn't get updated via map\n        data: [{\n          x: new Date(),\n          y: 2\n        }]\n      }\n    ]\n  }\n\n  const bgArray = [\n    /* 0 */ '#000000',\n    /* 1 */ '#000000',\n    /* 2 */ '#000000',\n    /* 3 */ 'linear-gradient(135deg, #5e7fb1 0%, #dce8f7 61%, #eff1f4 72%, #fce1a8 88%, #f7ec86 100%)', // dawn\n    /* 4 */ 'linear-gradient(135deg, #5e7fb1 0%, #dce8f7 61%, #eff1f4 72%, #fce1a8 88%, #f7ec86 100%)', // dawn\n    /* 5 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 6 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 7 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 8 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 9 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 10 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 11 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 12 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 13 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 14 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 15 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 16 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 17 */ 'linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)', // daylight\n    /* 18 */ 'linear-gradient(135deg, #171c33 0%, #525f83 42%, #848896 63%, #bb9d78 78%, #f6e183 100%)', // sunset\n    /* 19 */ 'linear-gradient(135deg, #171c33 0%, #525f83 42%, #848896 63%, #bb9d78 78%, #f6e183 100%)', // magic hour 1\n    /* 20 */ 'linear-gradient(135deg, #171c33 0%, #525f83 42%, #848896 63%, #bb9d78 78%, #f6e183 100%)', // magic hour 1\n    /* 21 */ '#000000',\n    /* 22 */ '#000000',\n    /* 23 */ '#000000',    \n  ]\n\n  const background = {\n    background: bgArray[new Date().getHours()]\n  }\n\n  return (\n    <div style={background}>\n      <div>\n        <input id=\"date\" type=\"date\" value={formattedDate} onChange={(e) => {\n          setDate(e.target.value)\n        }} disabled={!isLoaded}/>\n        {\n          error ? (<div>Error: {error.message}</div>) : (\n            !isLoaded ? (<div>Loading...</div>) :\n            (\n              <Line\n                data={chart}\n                // why is data coming from chart but options isn't?\n                options={{                  \n                  scales: {\n                    xAxes: [{\n                        type: 'time',\n                        time: {\n                          unit: 'hour',\n                          displayFormats: {\n                            hour: 'hA'\n                          }\n                        },\n                        ticks: {\n                          min: todayMidnight,\n                          max: tomorrowMidnight\n                        },\n                        gridLines: {\n                          display:false\n                        }\n                    }],\n                    yAxes: [{\n                      display: false,\n                      gridLines: {\n                        display:false\n                      },\n                      ticks: {\n                        suggestedMin: 0,\n                        suggestedMax: 8\n                      },\n                    }],\n                  }\n              }}\n            />  \n            )\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n// Make this useDate hook obsolete before next meeting DONE\n// Get bell curve chart loading on page\n// Also look at chartjs to show sun rise data\n// https://www.chartjs.org/samples/latest/scales/time/line-point-data.html\n\n// Add labels to all data points on chart\n// Kill all graph UI as much as possible (y axis, legend, background grid, etc.)\n// Explore a gradient background for chart\n// Make curve smoother","import { useEffect, useState } from \"react\"\n\nexport const useLocation = () => {\n  const [location, setLocation] = useState({\n    latitude: 0,\n    longitude: 0,\n  })\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(({coords}) => {\n      setLocation(coords)\n    })\n  }, [])\n\n  return location\n}\n","import { useEffect, useState } from \"react\"\n\nexport const useSunData = ({lat, lng, formattedDate}) => {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [results, setResult] = useState([]);  \n\n  useEffect(() => {\n\n    if (lat === 0 || lng === 0) {\n      return\n    }\n\n    fetch(`https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=${formattedDate}&formatted=0`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result)\n          setIsLoaded(true);\n          setResult(result.results);\n        },\n        (error) => {\n          console.log('no results')\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [ lat, lng, formattedDate ])\n\n  return {\n    results, isLoaded, error\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}