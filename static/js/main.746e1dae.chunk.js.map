{"version":3,"sources":["App.js","hooks/useLocation.js","hooks/useSunData.js","serviceWorker.js","index.js"],"names":["App","useState","latitude","longitude","location","setLocation","useEffect","sunriseCoords","localStorage","getItem","console","log","navigator","geolocation","getCurrentPosition","coords","setItem","JSON","stringify","useLocation","Date","date","setDate","formattedDate","moment","toISOString","format","todayMidnight","tomorrowMidnight","add","lat","lng","error","setError","isLoaded","setIsLoaded","results","setResult","sunriseCache","parse","fetch","then","res","json","result","useSunData","resultsArray","Object","keys","formattedData","map","key","i","x","toDate","filter","o","sort","a","b","valueOf","y","Math","floor","length","chart","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","data","firstDataVal","lastDataVal","firstDateTime","lastDateTime","values","background","getHours","className","style","id","type","value","onChange","e","target","disabled","message","options","annotation","annotations","drawTime","mode","scaleID","content","enabled","position","maintainAspectRatio","legend","display","scales","xAxes","time","unit","displayFormats","hour","ticks","min","max","gridLines","yAxes","suggestedMin","suggestedMax","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.746e1dae.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-plugin-annotation';\nimport moment from \"moment\";\nimport \"./App.css\";\nimport { useLocation } from \"./hooks/useLocation\";\nimport { useSunData } from \"./hooks/useSunData\";\n\nfunction App() {\n  const { latitude, longitude } = useLocation();\n\n  const [date, setDate] = useState(new Date());\n  const formattedDate = moment(date.toISOString()).format(\"YYYY-MM-DD\");\n  const todayMidnight = formattedDate;\n  const tomorrowMidnight = moment(date.toISOString()).add(1, \"d\").format(\"YYYY-MM-DD\");\n\n  const { results, isLoaded, error } = useSunData({\n    lat: latitude,\n    lng: longitude,\n    formattedDate: formattedDate,\n  });\n\n  const resultsArray = Object.keys(results);\n\n  const formattedData = resultsArray\n    .map((key, i) => {\n      if (typeof results[key] == \"string\") {\n        return {\n          x: moment(results[key]).toDate(),\n        };\n      }\n      return null;\n    })\n    .filter((o) => o)\n    .sort((a, b) => a.x.valueOf() - b.x.valueOf())\n    .map((o, i) => {\n      return {\n        ...o,\n        i,\n        y:\n          i < Math.floor(resultsArray.length / 2)\n            ? i\n            : resultsArray.length - 2 - i,\n      };\n    });\n\n\n  const chart = {\n    labels: [\"Today\"],\n    datasets: [\n      {\n        label: \"Sunrise-Sunset\",\n        fill: false,\n        lineTension: 0.4, // explore this to give line more of a bell curve\n        backgroundColor: \"rgba(75,192,192,1)\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        // data is null on first render and doesn't get updated via map\n        data: [\n          formattedData[Object.keys(formattedData)[0]],\n          formattedData[Object.keys(formattedData)[4]],\n          formattedData[Object.keys(formattedData)[8]]\n        ],\n      },\n    ],    \n  };\n\n  const firstDataVal = formattedData[Object.keys(formattedData)[0]]\n  const lastDataVal = formattedData[Object.keys(formattedData)[8]]\n  \n  let firstDateTime = todayMidnight\n  let lastDateTime = tomorrowMidnight\n\n  if (firstDataVal && lastDataVal) {\n    firstDateTime = Object.values(firstDataVal)\n    lastDateTime = Object.values(lastDataVal)\n  }\n\n  const bgArray = [\n    /* 0 */ \"#000000\",\n    /* 1 */ \"#000000\",\n    /* 2 */ \"#000000\",\n    /* 3 */ \"linear-gradient(135deg, #5e7fb1 0%, #dce8f7 61%, #eff1f4 72%, #fce1a8 88%, #f7ec86 100%)\", // dawn\n    /* 4 */ \"linear-gradient(135deg, #5e7fb1 0%, #dce8f7 61%, #eff1f4 72%, #fce1a8 88%, #f7ec86 100%)\", // dawn\n    /* 5 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 6 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 7 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 8 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 9 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 10 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 11 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 12 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 13 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 14 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 15 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 16 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 17 */ \"linear-gradient(135deg, #a2e0f9 6%, #cef5fc 39%, #eafaeb 70%, #fefcd3 88%, #fdf4ba 100%)\", // daylight\n    /* 18 */ \"linear-gradient(135deg, #171c33 0%, #525f83 42%, #848896 63%, #bb9d78 78%, #f6e183 100%)\", // sunset\n    /* 19 */ \"linear-gradient(135deg, #171c33 0%, #525f83 42%, #848896 63%, #bb9d78 78%, #f6e183 100%)\", // magic hour 1\n    /* 20 */ \"linear-gradient(135deg, #171c33 0%, #525f83 42%, #848896 63%, #bb9d78 78%, #f6e183 100%)\", // magic hour 1\n    /* 21 */ \"#000000\",\n    /* 22 */ \"#000000\",\n    /* 23 */ \"#000000\",\n  ];\n\n  const background = {\n    background: bgArray[new Date().getHours()],\n  };\n\n  return (\n    <div className=\"container\" style={background}>\n      <div>\n        <input\n          id=\"date\"\n          type=\"date\"\n          value={formattedDate}\n          onChange={(e) => {\n            setDate(e.target.value);\n          }}\n          disabled={!isLoaded}\n        />\n        {error ? (\n          <div>Error: {error.message}</div>\n        ) : !isLoaded ? (\n          <div>Loading...</div>\n        ) : (\n          <div className=\"chart-wrapper\">\n            <Line\n              data={chart}\n              options={{\n                annotation: {\n                  annotations: [\n                    {\n                      drawTime: \"afterDatasetsDraw\",\n                      type: \"line\",\n                      mode: \"vertical\",\n                      scaleID: \"x-axis-0\",\n                      value: new Date(),\n                      borderWidth: 2,\n                      borderColor: \"#ffd630\",\n                      label: {\n                        content: \"Current Time\",\n                        enabled: true,\n                        position: \"center\",\n                      },\n                    },\n                  ],\n                },\n                maintainAspectRatio: false,\n                legend: {\n                  display: false,\n                },\n                scales: {\n                  xAxes: [\n                    {\n                      type: \"time\",\n                      time: {\n                        unit: \"hour\",\n                        displayFormats: {\n                          hour: \"hA\",\n                        },\n                      },\n                      ticks: {\n                        min: firstDateTime[0],\n                        max: lastDateTime[0],\n                      },\n                      // ticks: {\n                      //   min: todayMidnight,\n                      //   max: tomorrowMidnight,\n                      // },\n                      gridLines: {\n                        display: false,\n                      },\n                    },\n                  ],\n                  yAxes: [\n                    {\n                      display: false,\n                      gridLines: {\n                        display: false,\n                      },\n                      ticks: {\n                        suggestedMin: 0,\n                        suggestedMax: 16,\n                      },\n                    },\n                  ],\n                },\n              }}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\"\n\nexport const useLocation = () => {\n  const [location, setLocation] = useState({\n    latitude: 0,\n    longitude: 0,\n  })\n\n  useEffect(() => {\n\n    const sunriseCoords = localStorage.getItem('sunriseCoords')\n    \n    if (sunriseCoords) {\n      console.log('location cache hit')\n      setLocation(sunriseCoords)\n      return\n    }\n\n    navigator.geolocation.getCurrentPosition(({coords}) => {\n      localStorage.setItem('sunriseCoords', JSON.stringify(coords))\n      setLocation(coords)\n    })\n  }, [])\n\n  return location\n}\n","import { useEffect, useState } from \"react\"\n\nexport const useSunData = ({lat, lng, formattedDate}) => {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [results, setResult] = useState({});  \n\n  useEffect(() => {\n\n    if (lat === 0 || lng === 0) {\n      console.log('invalid coords')\n      return\n    }\n\n    const sunriseCache = localStorage.getItem('sunriseResult')\n    \n    if (sunriseCache) {\n      console.log('cache hit')\n      setIsLoaded(true);\n      setResult(JSON.parse(sunriseCache).results);\n      return\n    }\n\n    fetch(`https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=${formattedDate}&formatted=0`)\n      .then(res => res.json())\n      .then((res) => {\n        localStorage.setItem('sunriseResult', JSON.stringify(res))\n        return res\n      })\n      .then(\n        (result) => {\n          // console.log(result)\n          setIsLoaded(true);\n          setResult(result.results);\n        },\n        (error) => {\n          console.log('no results')\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [ lat, lng, formattedDate ])\n\n  return {\n    results, isLoaded, error\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}